import httpm = require('./HttpClient');
import ifm = require("./interfaces/common/VsoBaseInterfaces");
import serm = require('./Serialization');
export interface IRestClientResponse {
    statusCode: number;
    result: any;
}
export declare class RestClient {
    client: RestCallbackClient;
    constructor(userAgent: string, handlers?: ifm.IRequestHandler[], socketTimeout?: number, versionParam?: string);
    get(requestUrl: string, apiVersion: string, additionalHeaders?: ifm.IHeaders, serializationData?: serm.SerializationData): Promise<IRestClientResponse>;
    del(requestUrl: string, apiVersion: string, additionalHeaders?: ifm.IHeaders, serializationData?: serm.SerializationData): Promise<IRestClientResponse>;
    create(requestUrl: string, apiVersion: string, objs: any, additionalHeaders?: ifm.IHeaders, serializationData?: serm.SerializationData): Promise<IRestClientResponse>;
    update(requestUrl: string, apiVersion: string, objs: any, additionalHeaders?: ifm.IHeaders, serializationData?: serm.SerializationData): Promise<IRestClientResponse>;
    private _getJson(verb, requestUrl, apiVersion, headers, serializationData);
    private _sendRequest(verb, requestUrl, apiVersion, objs, headers, serializationData);
}
export declare class RestCallbackClient {
    baseUrl: string;
    basePath: string;
    httpClient: httpm.HttpCallbackClient;
    versionParam: string;
    constructor(httpClient: httpm.HttpCallbackClient, versionParam?: string);
    get(url: string, apiVersion: string, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    del(url: string, apiVersion: string, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    create(url: string, apiVersion: string, resources: any, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    update(url: string, apiVersion: string, resources: any, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    options(url: string, onResult: (err: any, statusCode: number, obj: any) => void): void;
    uploadFile(verb: string, url: string, apiVersion: string, filePath: string, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    uploadStream(verb: string, url: string, apiVersion: string, contentStream: NodeJS.ReadableStream, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    replace(url: string, apiVersion: string, resources: any, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    _getJson(verb: string, url: string, apiVersion: string, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    _sendJson(verb: string, url: string, apiVersion: string, resources: any, customHeaders: ifm.IHeaders, serializationData: serm.SerializationData, onResult: (err: any, statusCode: number, obj: any) => void): void;
    createAcceptHeader(type: string, apiVersion?: string): string;
}
