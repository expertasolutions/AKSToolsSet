import http = require("http");
import ifm = require('./interfaces/common/VsoBaseInterfaces');
export interface IHttpClientResponse {
    statusCode: number;
    stream: NodeJS.ReadableStream;
    contents: string;
}
export declare class HttpClient {
    client: HttpCallbackClient;
    constructor(userAgent: string, handlers?: ifm.IRequestHandler[], socketTimeout?: number);
    get(requestUrl: string, additionalHeaders?: ifm.IHeaders): Promise<IHttpClientResponse>;
    del(requestUrl: string, additionalHeaders?: ifm.IHeaders): Promise<IHttpClientResponse>;
    post(requestUrl: string, data: string, additionalHeaders?: ifm.IHeaders): Promise<IHttpClientResponse>;
    patch(requestUrl: string, data: string, additionalHeaders?: ifm.IHeaders): Promise<IHttpClientResponse>;
    private _getRequest(verb, requestUrl, headers);
    private _sendRequest(verb, requestUrl, data, headers);
}
export declare class HttpCallbackClient {
    userAgent: string;
    handlers: ifm.IRequestHandler[];
    socketTimeout: number;
    isSsl: boolean;
    constructor(userAgent: string, handlers?: ifm.IRequestHandler[], socketTimeout?: number);
    get(verb: string, requestUrl: string, headers: ifm.IHeaders, onResult: (err: any, res: http.IncomingMessage, contents: string) => void): void;
    send(verb: string, requestUrl: string, data: string, headers: ifm.IHeaders, onResult: (err: any, res: http.ClientResponse, contents: string) => void): void;
    sendStream(verb: string, requestUrl: string, stream: NodeJS.ReadableStream, headers: ifm.IHeaders, onResult: (err: any, res: http.ClientResponse, contents: string) => void): void;
    getStream(requestUrl: string, accept: string, onResult: (err: any, statusCode: number, res: NodeJS.ReadableStream) => void): void;
    /**
     * Makes an http request delegating authentication to handlers.
     * returns http result as contents buffer
     * All other methods such as get, post, and patch ultimately call this.
     */
    request(protocol: any, options: any, data: string, onResult: (err: any, res: http.IncomingMessage, contents: string) => void): void;
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     */
    requestRaw(protocol: any, options: any, data: string, onResult: (err: any, res: http.IncomingMessage, contents: string) => void): void;
    private _getOptions(method, requestUrl, headers);
}
